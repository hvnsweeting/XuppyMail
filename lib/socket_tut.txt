INET sockets

"client" sockets
connect, send reques, destroyed

"server" sockets
doesn't send any data or receive any data. It just produces "client" sockets, which are created in response to some other "client" socket doing a connect to the host and port we're bound to

"client" socket in web browser and "client" socket in web server are identical - Peer to Peer

Rule the ways 2 client talk:
send - recv
socket status: broken after handling 0bytes
or live forever.
To ensuring 1 socket is done its jobs, we have 4 ways:
1. Messages must be fixed length
2. Messages must be delimited
3. Knowing how long message are
4. End by shutting down the connection

shutdown() before close()

read - write - flush


client app use "client" sockets
server use both

blocking socket
non-blocking socket

STREAM socket


_______________________________

Python module: socket (provide the standard BSD Sockets API)
	Class method:
		socket.socket(family, type)
		socket.getfqdn(name) #convert a ip add to fully qualified domain name
		socket.gethostbyname(hostname) #Resolve a hostname to a string quad dotted IP address.
		socket.fromfd(fd, family, type) #Create a socket obj from an existing file descriptor

	Instance method:
	sock.bind((adrs,port)) #bind the socket to add and port
	sock.accept() #return a client socket
	sock.listen(backlog) #Place socket into the listening state
	sock.connect((adrs,port))
	sock.recv(buflen[, flags])
	sock.recvfrom( buflen[,flags])
	sock.send(data [,flags])
	sock.sendto( date[,flags], addr)
	sock.close()
	sock.getsockopt(lvl, optname)
	sock.setsockopt(lvl, optname, val)
